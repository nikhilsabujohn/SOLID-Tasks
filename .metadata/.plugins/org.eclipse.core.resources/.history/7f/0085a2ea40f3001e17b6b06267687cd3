package com.ty.listDupe;

public class SinglyLinkedListDupDeletion {
	class Node {
        int data;
        Node next;

        public Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    public Node head = null;

    // Method to add a new node
    public void addNode(int data) {
        Node newNode = new Node(data);

        if(head == null) {
            head = newNode;
        } else {
            Node last = head;
            while(last.next != null) {
                last = last.next;
            }
            last.next = newNode;
        }
    }

    // Method to delete a node
    public void deleteNode(int key) {
        Node temp = head, prev = null;

        if (temp != null && temp.data == key) {
            head = temp.next; // Changed head
            return;
        }

        while (temp != null && temp.data != key) {
            prev = temp;
            temp = temp.next;
        }    

        if (temp == null) return;

        prev.next = temp.next;
    }

    // Method to display the nodes
    public void display() {
        Node current = head;

        if(head == null) {
            System.out.println("List is empty");
            return;
        }

        System.out.println("Nodes of singly linked list: ");
        while(current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        SinglyLinkedListDupDeletion sList = new SinglyLinkedListDupDeletion();

        // Add nodes to the list
        sList.addNode(1);
        sList.addNode(2);
        sList.addNode(3);
        sList.addNode(4);

        // Displays the nodes present in the list
        sList.display();

        // Delete node with data 2
        sList.deleteNode(2);

        // Displays the nodes present in the list after deletion
        sList.display();

}
}
