package com.ty.listDupe;

public class SinglyLinkedListDupDeletion {    
	    //Represent a node of the singly linked list    
	    class Node
	    {    
	        int data;    
	        Node next;    
	            
	        public Node(int data) {    
	            this.data = data;    
	            this.next = null;    
	        }    
	    }    
	     
   
	    public Node head = null;    
	    public Node tail = null;    
	        
   
	    public void addNode(int data) 
	    {    
	        Node newNode = new Node(data);    
	        
	        if(head == null) 
	        {      
	            head = newNode;    
	            tail = newNode;    
	        }    
	        else 
	        {      
	            tail.next = newNode;      
	            tail = newNode;    
	        }    
	    }    
	        
	    //display() will display all the nodes present in the list    
	    public void display() {    
	        //Node current will point to head    
	        Node current = head;    
	            
	        if(head == null) {    
	            System.out.println("List is empty");    
	            return;    
	        }    
	        System.out.println("Nodes of singly linked list: ");    
	        while(current != null) {    
	            //Prints each node by incrementing pointer    
	            System.out.print(current.data + " ");    
	            current = current.next;    
	        }    
	        System.out.println();    
	    }    
	        
	    public static void main(String[] args) {    
	            
	        SinglyLinkedListDupDeletion sList = new SinglyLinkedListDupDeletion();    
	            
	        //Add nodes to the list    
	        sList.addNode(1);    
	        sList.addNode(2);    
	        sList.addNode(3);    
	        sList.addNode(4);    
	            
	        //Displays the nodes present in the list    
	        sList.display();    
	    }    
	}   